{"version":3,"sources":["scripts/main.js"],"names":["board","score","rows","columns","isGameStarted","startGame","document","querySelector","classList","add","remove","addRandomTile","restartGame","Array","from","length","fill","renderBoard","innerText","winGame","loseGame","isNoMovesLeft","hasEmptyTile","r","c","current","gameField","getElementById","innerHTML","tile","createElement","id","updateTile","append","some","row","includes","found","Math","floor","random","newValue","num","animate","className","style","transform","setTimeout","filterZero","filter","slide","i","push","slideLeft","updateBoard","slideRight","reverse","slideUp","column","newColumn","map","slideDown","addEventListener","e","originalBoard","JSON","stringify","moves","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","code"],"mappings":"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","file":"main.d552cb91.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet board;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nlet isGameStarted = false;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  board = Array.from({ length: rows }, () => Array(columns).fill(0));\n  renderBoard();\n\n  const startButton = document.querySelector('.start');\n\n  startButton.addEventListener('click', startGame);\n\n  const restartButton = document.querySelector('.restart');\n\n  restartButton.addEventListener('click', restartGame);\n});\n\nfunction startGame() {\n  isGameStarted = true;\n\n  document.querySelector('.message-start').classList.add('hidden');\n  document.querySelector('.start').classList.add('hidden');\n  document.querySelector('.restart').classList.remove('hidden');\n\n  addRandomTile();\n  addRandomTile();\n}\n\nfunction restartGame() {\n  board = Array.from({ length: rows }, () => Array(columns).fill(0));\n  score = 0;\n  isGameStarted = false;\n  renderBoard();\n\n  document.querySelector('.game-score').innerText = score;\n\n  document.querySelector('.restart').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n  document.querySelector('.message-win').classList.add('hidden');\n  document.querySelector('.start').classList.remove('hidden');\n  document.querySelector('.message-start').classList.remove('hidden');\n}\n\nfunction winGame() {\n  document.querySelector('.message-win').classList.remove('hidden');\n  isGameStarted = false;\n}\n\nfunction loseGame() {\n  document.querySelector('.message-lose').classList.remove('hidden');\n  isGameStarted = false;\n}\n\nfunction isNoMovesLeft() {\n  if (hasEmptyTile()) {\n    return false;\n  }\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const current = board[r][c];\n\n      if (r > 0 && board[r - 1][c] === current) {\n        return false;\n      }\n\n      if (r < rows - 1 && board[r + 1][c] === current) {\n        return false;\n      }\n\n      if (c > 0 && board[r][c - 1] === current) {\n        return false;\n      }\n\n      if (c < columns - 1 && board[r][c + 1] === current) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction renderBoard() {\n  const gameField = document.getElementById('board');\n\n  gameField.innerHTML = '';\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const tile = document.createElement('div');\n\n      tile.id = `${r}-${c}`;\n      updateTile(tile, board[r][c]);\n      gameField.append(tile);\n    }\n  }\n}\n\nfunction hasEmptyTile() {\n  return board.some(row => row.includes(0));\n}\n\nfunction addRandomTile() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      const newValue = Math.random() < 0.6 ? 2 : 4;\n\n      board[r][c] = newValue;\n\n      const tile = document.getElementById(`${r}-${c}`);\n\n      updateTile(tile, newValue, true);\n      found = true;\n    }\n  }\n}\n\nfunction updateTile(tile, num, animate = false) {\n  tile.innerText = num > 0 ? num : '';\n\n  tile.className = `field-cell${num > 0 && num <= 2048\n    ? ` field-cell--${num}`\n    : ''\n  }`;\n\n  if (animate) {\n    tile.style.transform = 'scale(0.5)';\n\n    setTimeout(() => {\n      tile.style.transform = 'scale(1)';\n    }, 50);\n  }\n}\n\ndocument.addEventListener('keyup', (e) => {\n  const originalBoard = JSON.stringify(board);\n\n  if (!isGameStarted) {\n    return;\n  }\n\n  const moves = {\n    ArrowLeft: slideLeft,\n    ArrowRight: slideRight,\n    ArrowUp: slideUp,\n    ArrowDown: slideDown,\n  };\n\n  if (moves[e.code]) {\n    moves[e.code]();\n\n    if (originalBoard !== JSON.stringify(board)) {\n      addRandomTile();\n    }\n  }\n\n  document.querySelector('.game-score').innerText = score;\n});\n\n/* eslint-disable no-param-reassign */\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  row = filterZero(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (row[i] === row[i + 1]) {\n      row[i] *= 2;\n      row[i + 1] = 0;\n      score += row[i];\n    }\n  }\n\n  row = filterZero(row);\n\n  while (row.length < columns) {\n    row.push(0);\n  }\n\n  return row;\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < rows; r++) {\n    board[r] = slide(board[r]);\n  }\n  updateBoard();\n}\n\nfunction slideRight() {\n  for (let r = 0; r < rows; r++) {\n    board[r] = slide(board[r].reverse()).reverse();\n  }\n  updateBoard();\n}\n\nfunction slideUp() {\n  for (let c = 0; c < columns; c++) {\n    const column = board.map(row => row[c]);\n    const newColumn = slide(column);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = newColumn[r];\n    }\n  }\n  updateBoard();\n}\n\nfunction slideDown() {\n  for (let c = 0; c < columns; c++) {\n    const column = board.map(row => row[c]).reverse();\n    const newColumn = slide(column).reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = newColumn[r];\n    }\n  }\n  updateBoard();\n}\n\nfunction updateBoard() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(`${r}-${c}`);\n\n      updateTile(tile, board[r][c]);\n    }\n\n    if (board[r].includes(2048)) {\n      winGame();\n\n      return;\n    };\n\n    if (isNoMovesLeft()) {\n      loseGame();\n    }\n  }\n}\n"]}